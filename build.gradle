import net.minecraftforge.gradleutils.GradleUtilsExtensionForProject
import net.minecraftforge.licenser.LicenseExtension
import org.gradle.api.plugins.jvm.JvmTestSuite
import org.gradle.api.tasks.testing.logging.TestExceptionFormat

plugins {
    alias libs.plugins.javadoc.links apply false
    alias libs.plugins.gradleutils apply false
    alias libs.plugins.changelog
    alias libs.plugins.licenser apply false
}

group = 'net.minecraftforge'
//version set by git version in settings.gradle

changelog {
    from '0.3'
    publishAll = true
    includeSubprojects = true
}

subprojects {
    apply {
        plugin 'java-library'
        plugin 'jvm-test-suite'
        plugin 'idea'
        plugin 'maven-publish'
        plugin libs.plugins.javadoc.links.get().pluginId
        plugin libs.plugins.gradleutils.get().pluginId
        plugin libs.plugins.changelog.get().pluginId
        plugin libs.plugins.licenser.get().pluginId
    }

    //noinspection GroovyAccessibility -- IntelliJ is stupid
    final gradleutils = (GradleUtilsExtensionForProject) gradleutils

    description = "Jar-in-Jar Utilities including the required NIO FileSystems. SubSystem: ${project.name}"
    group = rootProject.group
    //version set by git version in settings.gradle

    ((JavaPluginExtension) java).tap {
        toolchain.languageVersion = JavaLanguageVersion.of(8)
        withSourcesJar()
    }

    ((TestingExtension) testing).tap {
        suites.named('test', JvmTestSuite) {
            useJUnitJupiter(libs.versions.junit)

            targets.configureEach {
                testTask.configure {
                    ignoreFailures = true
                    javaLauncher = javaToolchains.launcherFor { languageVersion = JavaLanguageVersion.of(17) }
                    testLogging { exceptionFormat = TestExceptionFormat.FULL }
                }
            }
        }
    }

    tasks.named('processTestResources', ProcessResources) {
        duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    }

    tasks.named('jar', Jar) {
        manifest {
            attributes([
                'Maven-Artifact'        : "${project.group}:${base.archivesName.get()}:${project.version}",
                'Specification-Title'   : project.name,
                'Specification-Vendor'  : 'Forge Development LLC',
                'Specification-Version' : '1',
                'Implementation-Title'  : project.name,
                'Implementation-Version': project.version,
                'Implementation-Vendor' : 'Forge Development LLC',
                'Automatic-Module-Name' : project.name,
            ])
        }
    }

    ((LicenseExtension) license).tap {
        header = rootProject.file('LICENSE-header.txt')
        newLine = false
        exclude '**/*.properties'
    }

    ((PublishingExtension) publishing).tap {
        repositories {
            maven gradleutils.publishingForgeMaven
        }

        publications.register('mavenJava', MavenPublication) {
            from components.java

            gradleutils.promote(it)

            pom {
                name = project.name
                description = project.description

                gradleutils.pom.addRemoteDetails(pom)

                licenses {
                    license gradleutils.pom.licenses.LGPLv2_1
                }
            }
        }
    }

}
